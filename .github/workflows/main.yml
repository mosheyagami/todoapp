name: Build, Secure, Release & Update Manifests

on:
  push:
    branches:
      - main

jobs:
  code-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build

  secret-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  semantic-release:
    runs-on: ubuntu-latest
    needs: [code-build, secret-scan]
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: write
    outputs:
      pkg-version: ${{ steps.get-version.outputs.pkg-version }}
      prev-pkg-version: ${{ steps.get-previous-version.outputs.prev-pkg-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build

      - name: Get previous release version
        id: get-previous-version
        run: |
          PREV_PKG_VERSION=$(npm pkg get version)
          echo "prev-pkg-version=$PREV_PKG_VERSION" > $GITHUB_OUTPUT

      - name: Semantic release
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 2
          command: npx semantic-release

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get updated release version
        id: get-version
        run: |
          PKG_VERSION=$(npm pkg get version)
          echo "pkg-version=$PKG_VERSION" > $GITHUB_OUTPUT

  image-build:
    runs-on: ubuntu-latest
    needs: [semantic-release]
    if: ${{ needs.semantic-release.outputs.pkg-version != needs.semantic-release.outputs.prev-pkg-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-docker-${{ github.sha }}
            restore-keys: |
                ${{ runner.os }}-docker-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v5
        with:
            context: .
            file: ./Dockerfile
            platforms: linux/amd64,linux/arm64
            push: true
            tags: |
                ${{ secrets.DOCKER_USERNAME }}/todoapp:latest
                ${{ secrets.DOCKER_USERNAME }}/todoapp:v${{ fromJSON(needs.semantic-release.outputs.pkg-version) }}
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Replace cache for future builds
        run: |
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Scan Docker image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
            image-ref: ${{ secrets.DOCKER_USERNAME }}/todoapp:latest
            format: "github"
            output: "dependency-results.sbom.json"
            severity: "CRITICAL,HIGH"
            exit-code: "1"

  update-manifests:
    runs-on: ubuntu-latest
    needs: [image-build, semantic-release]
    steps:
      - name: Checkout GitOps Repo
        uses: actions/checkout@v4
        with:
          repository: mosheyagami/todo-gitops-config
          ref: main
          token: ${{ secrets.TODOAPP_PAT }}

      - name: GitOps - Update Deployment Manifest
        run: |
          cd dev
          sed -i "s|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/todoapp:v${{ needs.semantic-release.outputs.pkg-version }}|" deployment.yml

      - name: Commit and push changes
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add dev/deployment.yml
          git commit -m "chore: bump image version to v${{ needs.semantic-release.outputs.pkg-version }}"
          git push